import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * 
 * @author sam
 *
 */
public class Controller {
	
	/**
	 * 
	 */
	private Board gameBoard;
	private Display gameDisplay;
	private Player human, ai1, ai2;
	private Deck deck;
	private Hand playerHand;
	//private ArrayList<Card> playerHand = new ArrayList<Card>();
	private static final int TOTAL_ROOM = 21;

	/**
	 * 
	 */
	public Controller() {
		gameBoard = new Board();
		gameDisplay = new Display();
		human = new Player("Jimmy", 17, 2, 2, 2 , 0, 1, 1);
		ai1 = new Player("Mary", 17, 3, 1, 2 , 0, 1, 2);
		ai2 = new Player("Tom", 17, 0, 3, 3 , 0, 1, 3);
		deck = new Deck();
		playerHand = new Hand();

		updateInfoPanel();
		updateConnectedRoomList();
		drawAllTokens();
		moveBtnListener();
		drawCardBtnListener();
		playCardBtnListener();
	}
	
	/**
	 * 
	 */
	public void drawAllTokens() {
		gameDisplay.drawToken(human.getName(), gameBoard.getPos(human.getLoc()), human.getDrawPos());
		gameDisplay.drawToken(ai1.getName(), gameBoard.getPos(ai1.getLoc()), ai1.getDrawPos());
		gameDisplay.drawToken(ai2.getName(), gameBoard.getPos(ai2.getLoc()), ai2.getDrawPos());
	}

	/**
	 * 
	 */
	public void clearAllTokens() {
		gameDisplay.clearAllTokens();
	}
	
	/**
	 * 
	 * @param name
	 * @return
	 */
	public int roomNameToLoc(String name) {
		for(int i=0; i<TOTAL_ROOM; i++) {
			if(name.equals(gameBoard.getName(i))) {
				return i;
			}
		}
		System.out.println("Error in RoomName to Loc in Controller Class");
		return -1;
	}
	
	/**
	 * 
	 */
	public void updateConnectedRoomList() {
		int[] newRoomList = gameBoard.getConnectedRoom(human.getLoc());
		String[] newRoomsStr = new String[newRoomList.length];
		for(int i=0; i<newRoomList.length; i++) {
			newRoomsStr[i] = gameBoard.getName(newRoomList[i]);
		}
		gameDisplay.updateRoomList(newRoomsStr);
	}
	
	public void updatePlayerHand() {
		gameDisplay.updatePlayerHand(playerHand);
	}
	
	public void updateHuman(){
		gameDisplay.updateHuman(human);
	}
	
	public void updateAI1(){
		gameDisplay.updateAI1(ai1);
	
	}
	
	public void updateAI2(){
		gameDisplay.updateAI2(ai2);
	}
	
	public void updateInfoPanel(){
		updateHuman();
		updateAI1();
		updateAI2();
	}
	
	/**
	 * 
	 */
	public void moveBtnListener() {
		gameDisplay.moveBtnListener( new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				
				//get Human player's new room number.
				int newLoc = roomNameToLoc(gameDisplay.getSelectedRoom());
				//update human player's location
				human.setLoc(newLoc);
				//update and redraw map
				clearAllTokens();
				drawAllTokens();
				//update connected rooms list(JList)
				updateConnectedRoomList();
				
			}
			
		});
	}
	
	public void drawCardBtnListener() {
		gameDisplay.drawCardBtnListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				
				//add card from deck to hand
				playerHand.addCard(deck.deal());
				//update player hand in infoPane
				updatePlayerHand();
				
				///test code//////
				System.out.println("card is draw");
				System.out.println(playerHand.size());
				
			}
			
		});
	}
	
	public void playCardBtnListener() {
		gameDisplay.playCardBtnListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				
				System.out.println(human.toString());
				//get selected card index to be played
				int selectedCard = gameDisplay.getSelectedCard();
				//play the selected card
				human = playerHand.getCard(selectedCard).play(human);
				//remove selected card from hand
				playerHand.removeCard(selectedCard);
				//update current player's hand to InfoPane
				updatePlayerHand();
				//IGNORE for now -- optimization.//////////////////
				//Idea: when the card is played, the card image is removed and 
				//		the next card image is display.
				gameDisplay.resetSelectedCard();
				gameDisplay.clickImageButton();
				//update and redraw map (important of "teleport" card)
				clearAllTokens();
				drawAllTokens();
				updateInfoPanel();
				
				////////////////////Debug///////////////////////////
				System.out.println(human.toString());
			}
			
		});
	}
}
